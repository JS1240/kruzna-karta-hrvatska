services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: diidemo-postgres
    env_file:
      - .env
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - diidemo-network

  # Redis (for caching and task queue)
  redis:
    image: redis:7-alpine
    container_name: diidemo-redis
    env_file:
      - .env
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - diidemo-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: diidemo-backend
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - diidemo-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: diidemo-frontend
    env_file:
      - .env
    environment:
      - VITE_API_BASE_URL=/api
      - VITE_MAPBOX_ACCESS_TOKEN=pk.eyJ1IjoianVyZXN1bmljIiwiYSI6ImNtYXdyMDkxZTBlbzYyanNlaXdoNW9meTgifQ.V41Awnp1HmWHVxua6Mm_-w
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - diidemo-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: diidemo-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_healthy
    networks:
      - diidemo-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  diidemo-network:
    driver: bridge